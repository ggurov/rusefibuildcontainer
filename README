# This makes it simpler to compile rusefi firmware by shoving the build environment into a container with ubuntu and all of the latest software bits required


# build and run the container, it should have all the bits needed for compiling

./build_container.sh 
./run_container.sh

# check out the code into repo directory

cd /rusefi

git clone https://github.com/rusefi/rusefi.git

cd rusefi

git submodule update --init

cd firmware

bin/compile.sh



root@8f742cb38bfe:/rusefi/rusefi/firmware# bin/compile.sh
 1) alphax-2chan default                          18) f469-discovery default                        35) hellenMiataNB1 default                        52) proteus proteus_f7_debug
 2) alphax-4chan alphax-4chan                     19) frankenso_na6 default                         36) hellenMiataNB2 default                        53) proteus proteus_f7_hardware_QC_special_build
 3) alphax-4chan alphax-4chan_f7                  20) hellen-112-17 hellen-112-17                   37) kinetis default                               54) proteus proteus_f7_tcu
 4) alphax-8chan alphax-8chan                     21) hellen-112-17 hellen-112-17_debug             38) m74_9 default                                 55) proteus proteus_h7
 5) alphax-8chan alphax-8chan_debug               22) hellen-gm-e67 default                         39) microrusefi mre-legacy_f4                     56) proteus proteus_h7_debug
 6) alphax-8chan alphax-8chan_f7                  23) hellen-honda-k hellen-honda-k                 40) microrusefi mre_f4                            57) proteus proteus_legacy
 7) alphax-8chan-revA default                     24) hellen-honda-k hellen-honda-k_debug           41) microrusefi mre_f7                            58) s105 default
 8) alphax-silver default                         25) hellen121nissan default                       42) nucleo_f413 default                           59) small-can-board small-can-board
 9) at_start_f435 default                         26) hellen121vag default                          43) nucleo_f429 default                           60) small-can-board small-can-board_debug
10) atlas default                                 27) hellen128 default                             44) nucleo_f767 stm32f767_nucleo                  61) subaru_eg33 subaru_eg33_f7
11) cypress default                               28) hellen154hyundai hellen154hyundai             45) nucleo_f767 stm32f767_nucleo_debug            62) subaru_eg33 subaru_eg33_f7_no_bl
12) f405 default                                  29) hellen154hyundai_f7 hellen154hyundai_f7       46) nucleo_f767 stm32f767_osc                     63) tdg-pdm8 default
13) f407-discovery f407-discovery_debug           30) hellen81 default                              47) nucleo_h743 default                           64) test-build-guards default
14) f407-discovery default                        31) hellen88bmw hellen88bmw                       48) proteus proteus_f4                            65) uaefi default
15) f429-208 default                              32) hellen88bmw hellen88bmw_avr                   49) proteus proteus_f4_debug
16) f429-discovery default                        33) hellenMiataNA6 default                        50) proteus proteus_f4_hardware_QC_special_build
17) f469 default                                  34) hellenMiataNA96 default                       51) proteus proteus_f7
Select a build by entering its number: 14


.
.
.
.



[META] Reading meta env from ./config/boards/hellen/uaefi/meta-info.env
[META] PROJECT_BOARD=
[META] PROJECT_CPU=ARCH_STM32F4
[META] POST_BUILD_SCRIPT=
[META] BOARD_DIR=./config/boards/hellen/uaefi
[META] USE_OPENBLT=
found ./config/boards/hellen/uaefi/connectors/generated_ts_name_by_pin.cpp
PROJECT_BOARD: uaefi
BOARD_DIR:     ././config/boards/hellen/uaefi


.
.
.
.



Linking build/rusefi.elf
lto-wrapper: warning: Options to '-Xassembler' do not match: -alms=build/lst/gcc_version_check.lst, -alms=build/lst/crt1.lst, dropping all '-Xassembler' and '-Wa' options.
Creating build/rusefi.hex
Creating build/rusefi.bin
Creating build/rusefi.dmp
Creating build/rusefi.list
Creating build/rusefi.srec

   text    data     bss     dec     hex filename
 532488    1584  188216  722288   b0570 build/rusefi.elf
bss Total size: 114327
ram4 Total size: 0
text Total size: 403122
data Total size: 1471
rodata Total size: 107648
 20 .ram4         0000e560  10000000  08082650  000b0000  2**3

Done
root@bfa3cddcd67a:/rusefi/rusefi/firmware/config/boards/hellen/uaefi#


# ---------------------
# firware is here

ls -la /rusefi/rusefi/firmware/build


root@bfa3cddcd67a:/rusefi/rusefi/firmware/build# ls -la /rusefi/rusefi/firmware/build
total 33708
drwxr-xr-x  4 root root     4096 Feb 24 18:55 .
drwxr-xr-x 22 root root     4096 Feb 24 18:55 ..
drwxr-xr-x  2 root root    20480 Feb 24 18:55 lst
drwxr-xr-x  2 root root    20480 Feb 24 18:55 obj
-rwxr-xr-x  1 root root   534096 Feb 24 18:55 rusefi.bin
-rw-r--r--  1 root root   738564 Feb 24 18:55 rusefi.dmp
-rwxr-xr-x  1 root root 18285028 Feb 24 18:55 rusefi.elf
-rw-r--r--  1 root root  1502297 Feb 24 18:55 rusefi.hex
-rw-r--r--  1 root root  9227459 Feb 24 18:55 rusefi.list
-rw-r--r--  1 root root  2675571 Feb 24 18:55 rusefi.map
-rwxr-xr-x  1 root root  1602318 Feb 24 18:55 rusefi.srec


## exit out of the container, it will get removed on exit, but the repo directory is external and ./run_container.sh will get back to spot where compile can happen

